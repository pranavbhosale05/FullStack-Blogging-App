pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        IMAGE_TAG = "${BUILD_NUMBER}"
        GIT_REPO_NAME = "FullStack-Blogging-App"
        GIT_USER_NAME = "mayur11052000"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/mayur11052000/FullStack-Blogging-App.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('trivy fs scan') {
            steps {
                sh "trivy fs --format table -o fs.html ."
            }
        }
        
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Mayur -Dsonar.projectName=mayur -Dsonar.java.binaries=. '''

                }
            }
        }
        
        stage('SonarQube quality gate') {
            steps {
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token1'
                }
            }
        }
        
        
        stage('package') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage('docker build image') {
            steps {
                sh "docker build -t mayurblog${BUILD_NUMBER} ."
            }
        }
        
         stage('docker image scan') {
            steps {
                sh "trivy image --format table -o trivy.fs-report.html --scanners vuln mayurblog${BUILD_NUMBER} "
            }
        }
        
        stage('docker tag and push') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker tag mayurblog${BUILD_NUMBER} mayur11052000/mayurblog${BUILD_NUMBER}"
                        sh "docker push mayur11052000/mayurblog${BUILD_NUMBER}"
                    }
                }
                
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'git', variable: 'github')])  {
                    
                    sh '''
                    
                    git config user.email "mayur.bhusawal@gmail.com"
                    git config user.name "Mayur Patil"
                
                    sed -i "s/mayurblog.*/mayurblog${BUILD_NUMBER}:latest/g" deployment-service.yml
                
                    git add deployment-service.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                
                    git push https://${github}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    
                    '''
                    
                }
            }  
        }  
    }
    
    post {
            always {
                script {
                    def jobName = env.JOB_NAME
                    def buildNumber = env.BUILD_NUMBER
                    def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                    def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                    
                    def body = """
                        <html>
                        <body>
                        <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                        <h2>${jobName} - Build ${buildNumber}</h2>
                        <div style="background-color: ${bannerColor}; padding: 10px;">
                        <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                        </div>
                        <p>Check the <a href="${env.BUILD_URL}">console output</a>.</p>
                        </div>
                        </body>
                        </html>
                    """
                    emailext (
                        subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                        body: body,
                        to: 'bhosalepranav055@gmail.com',
                        from: 'jenkins@example.com',
                        replyTo: 'jenkins@example.com',
                        mimeType: 'text/html'
                    )
                }
            }
        }

}
